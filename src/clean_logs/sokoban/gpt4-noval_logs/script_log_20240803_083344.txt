
AutoToS prompt:

This domain models the classic Sokoban game, where the robot needs to move around and push stones to specific locations while adhering to the constraints defined by the walls in the maze. 
The maze is defined by a grid of values 0,1, and 2, where 2 means it is a goal location for a stone, 1 means the cell is blocked, and either 0 or 2 means that the cell can be occupied. A cell is clear if it can be occupied, but is not occupied by either the player or any stone.

The actions are:

move: This action moves the player in a specified direction. To perform this action, the target location must be clear and adjacent to player's location. Performing this action will result in the player being at the target location and no longer at the starting location, meaning the starting location is now clear, while the target location is now not clear.

push: This action allows the player to push a stone in a specified direction. To perform this action, the player's location, the stone location, and the target location must line up in the same direction, and the target location must be clear. Performing the action results in player being at the stone's initial location and the stone is at the target location. Further, the player's previous location is clear, while the target location is not clear.

Assume that states are defined by a dictionary with keys at-player and at-stone. 
Here is an example of a state
{'at-player': (4, 4), 'at-stone': [(2, 2), (3, 3)]}
Here is an example of the grid:
[[1, 1, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 2, 2, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1]]

Provide a Python implementation of successor states function, receiving a state and a grid and returning a list of immediate successor states.

Model response:
```python
def sokoban_successors(state, grid):
    def is_within_bounds(pos):
        return 0 <= pos[0] < len(grid) and 0 <= pos[1] < len(grid[0])
    
    def is_clear(pos):
        # a cell is clear if it is 0 or 2 and not occupied by the player or a stone
        if not is_within_bounds(pos):
            return False
        row, col = pos
        return grid[row][col] != 1 and pos != state['at-player'] and pos not in state['at-stone']
    
    def move_player(direction):
        row, col = state['at-player']
        if direction == 'up':
            new_pos = (row - 1, col)
        elif direction == 'down':
            new_pos = (row + 1, col)
        elif direction == 'left':
            new_pos = (row, col - 1)
        elif direction == 'right':
            new_pos = (row, col + 1)
        
        if is_clear(new_pos):
            new_state = state.copy()
            new_state['at-player'] = new_pos
            return new_state
        return None
    
    def push_stone(direction):
        row, col = state['at-player']
        if direction == 'up':
            stone_pos = (row - 1, col)
            target_pos = (row - 2, col)
        elif direction == 'down':
            stone_pos = (row + 1, col)
            target_pos = (row + 2, col)
        elif direction == 'left':
            stone_pos = (row, col - 1)
            target_pos = (row, col - 2)
        elif direction == 'right':
            stone_pos = (row, col + 1)
            target_pos = (row, col + 2)
        
        if stone_pos in state['at-stone'] and is_clear(target_pos):
            new_state = state.copy()
            new_state['at-player'] = stone_pos
            new_state['at-stone'] = [target_pos if pos == stone_pos else pos for pos in state['at-stone']]
            return new_state
        return None
    
    directions = ['up', 'down', 'left', 'right']
    successors = []

    # Move actions
    for direction in directions:
        new_state = move_player(direction)
        if new_state:
            successors.append(new_state)
    
    # Push actions
    for direction in directions:
        new_state = push_stone(direction)
        if new_state:
            successors.append(new_state)
    
    return successors
```

AutoToS prompt:

Provide only the python code that tests whether a state is a goal state for a given goal configuration. Assume that the goal configuration is provided by the 2-dimensional array as before. The function should receive a state and the 2-dimensional array and return True if the state is a goal state and False otherwise.

Model response:
```python
def is_goal_state(state, goal_grid):
    goal_positions = {(r, c) for r in range(len(goal_grid)) for c in range(len(goal_grid[0])) if goal_grid[r][c] == 2}
    stones_positions = set(state['at-stone'])
    return stones_positions == goal_positions
```

System message:
Goal Soundness Test Passed
Soundness test

System message:
Successor States Soundness Test Passed
Completeness test
Successor Completeness Test Passed
Total success: 11, failure: 0, total expansions 764034, total generated 1955983
