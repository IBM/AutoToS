
AutoToS prompt:

This domain models the classic Sokoban game, where the robot needs to move around and push stones to specific locations while adhering to the constraints defined by the walls in the maze. 
The maze is defined by a grid of values 0,1, and 2, where 2 means it is a goal location for a stone, 1 means the cell is blocked, and either 0 or 2 means that the cell can be occupied. A cell is clear if it can be occupied, but is not occupied by either the player or any stone.

The actions are:

move: This action moves the player in a specified direction. To perform this action, the target location must be clear and adjacent to player's location. Performing this action will result in the player being at the target location and no longer at the starting location, meaning the starting location is now clear, while the target location is now not clear.

push: This action allows the player to push a stone in a specified direction. To perform this action, the player's location, the stone location, and the target location must line up in the same direction, and the target location must be clear. Performing the action results in player being at the stone's initial location and the stone is at the target location. Further, the player's previous location is clear, while the target location is not clear.

Assume that states are defined by a dictionary with keys at-player and at-stone. 
Here is an example of a state
{'at-player': (4, 4), 'at-stone': [(2, 2), (3, 3)]}
Here is an example of the grid:
[[1, 1, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 2, 2, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1]]

Provide a Python implementation of successor states function, receiving a state and a grid and returning a list of immediate successor states.

Model response:
```python
def successor_states(state, grid):
    from collections import deque

    def is_clear(cell):
        x, y = cell
        return grid[x][y] == 0 or grid[x][y] == 2

    def in_bounds(cell):
        x, y = cell
        return 0 <= x < len(grid) and 0 <= y < len(grid[0])

    def move_player(direction, player_pos):
        dx, dy = direction
        new_player_pos = (player_pos[0] + dx, player_pos[1] + dy)
        return new_player_pos if in_bounds(new_player_pos) and is_clear(new_player_pos) else None

    def push_stone(direction, player_pos, stone_pos):
        dx, dy = direction
        new_stone_pos = (stone_pos[0] + dx, stone_pos[1] + dy)
        new_player_pos = stone_pos
        if in_bounds(new_stone_pos) and is_clear(new_stone_pos) and new_player_pos == player_pos:
            return new_player_pos, new_stone_pos
        return None, None

    player_pos = state['at-player']
    stone_pos = state['at-stone']

    moves = {
        'up': (-1, 0),
        'down': (1, 0),
        'left': (0, -1),
        'right': (0, 1)
    }

    successor_states = []
    
    # Try moving the player
    for direction, move in moves.items():
        new_player_pos = move_player(move, player_pos)
        if new_player_pos:
            successor_states.append({'at-player': new_player_pos, 'at-stone': stone_pos})

    # Try pushing the stones
    for stone in stone_pos:
        for direction, move in moves.items():
            new_player_pos, new_stone_pos = push_stone(move, player_pos, stone)
            if new_stone_pos:
                new_stones = [s for s in stone_pos if s != stone] + [new_stone_pos]
                successor_states.append({'at-player': new_player_pos, 'at-stone': new_stones})

    return successor_states
```

AutoToS prompt:

Provide only the python code that tests whether a state is a goal state for a given goal configuration. Assume that the goal configuration is provided by the 2-dimensional array as before. The function should receive a state and the 2-dimensional array and return True if the state is a goal state and False otherwise.

Model response:
```python
def is_goal_state(state, goal_configuration):
    def goal_positions():
        return {(i, j) for i in range(len(goal_configuration)) for j in range(len(goal_configuration[0])) if goal_configuration[i][j] == 2}

    stone_positions = set(tuple(stone) for stone in state['at-stone'])
    goal_pos = goal_positions()
    
    return stone_positions == goal_pos
```

System message:
Goal Soundness Test Passed
Soundness test

System message:
Successor States Soundness Test Passed
Completeness test
Successor Iteration 1

AutoToS prompt:
Error occurred for grid configuration: [[1, 1, 1, 1, 1, 1], [1, 0, 0, 2, 0, 1], [1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1], [1, 0, 1, 2, 1, 1], [1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 0]]
Successor function when run on the state {'at-player': (5, 3), 'at-stone': [(5, 2), (4, 3)]} failed to produce all successors.
Missing successors are: [{'at-player': (5, 2), 'at-stone': [(5, 1), (4, 3)]}]
First think step by step why the successor function failed to produce all successors of the state.
Then, fix the successor function.
Remember how you fixed the previous mistakes, if any. Keep the same function signature.

Model response:
The issue in the original successor function arises from the logic used to determine when a stone can be pushed. Specifically, it did not correctly handle the situation where the player could move into the space adjacent to a stone and push it into a free cell. 

In the provided example, the player located at (5, 3) can move to (5, 2) to push the stone located at (5, 2) to the left into (5, 1), but the original logic failed to recognize this possibility when evaluating the conditions for pushing.

To fix this, I need to modify the code so that it checks if the player can move to the position adjacent to the stone before pushing. I also need to ensure that it properly identifies the initial player and stone positions.

Here is the corrected successor function:

```python
def successor_states(state, grid):
    from collections import deque

    def is_clear(cell):
        x, y = cell
        return grid[x][y] == 0 or grid[x][y] == 2

    def in_bounds(cell):
        x, y = cell
        return 0 <= x < len(grid) and 0 <= y < len(grid[0])

    def move_player(direction, player_pos):
        dx, dy = direction
        new_player_pos = (player_pos[0] + dx, player_pos[1] + dy)
        return new_player_pos if in_bounds(new_player_pos) and is_clear(new_player_pos) else None

    def can_push_stone(direction, player_pos, stone_pos):
        dx, dy = direction
        adjacent_player_pos = (stone_pos[0] - dx, stone_pos[1] - dy)
        new_stone_pos = (stone_pos[0] + dx, stone_pos[1] + dy)
        return (in_bounds(new_stone_pos) and is_clear(new_stone_pos) and
                in_bounds(adjacent_player_pos) and adjacent_player_pos == player_pos)

    player_pos = state['at-player']
    stone_pos = state['at-stone']

    moves = {
        'up': (-1, 0),
        'down': (1, 0),
        'left': (0, -1),
        'right': (0, 1)
    }

    successor_states = []

    # Try moving the player
    for direction, move in moves.items():
        new_player_pos = move_player(move, player_pos)
        if new_player_pos:
            successor_states.append({'at-player': new_player_pos, 'at-stone': stone_pos})

    # Try pushing each stone
    for stone in stone_pos:
        for direction, move in moves.items():
            if can_push_stone(move, player_pos, stone):
                new_player_pos = stone
                new_stone_pos = (stone[0] + move[0], stone[1] + move[1])
                new_stones = [s for s in stone_pos if s != stone] + [new_stone_pos]
                successor_states.append({'at-player': new_player_pos, 'at-stone': new_stones})

    return successor_states
```

System message:
Successor States Soundness Test Passed
Completeness test
Successor Completeness Test Passed
Found solution of length 25, optimal: 69
Grid [[0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 1], [1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0]]
[{'at-player': (4, 1), 'at-stone': [(4, 2), (3, 9), (5, 9)]}, {'at-player': (4, 2), 'at-stone': [(3, 9), (5, 9), (4, 3)]}, {'at-player': (4, 3), 'at-stone': [(3, 9), (5, 9), (4, 3)]}, {'at-player': (4, 4), 'at-stone': [(3, 9), (5, 9), (4, 3)]}, {'at-player': (4, 5), 'at-stone': [(3, 9), (5, 9), (4, 3)]}, {'at-player': (4, 6), 'at-stone': [(3, 9), (5, 9), (4, 3)]}, {'at-player': (4, 7), 'at-stone': [(3, 9), (5, 9), (4, 3)]}, {'at-player': (4, 8), 'at-stone': [(3, 9), (5, 9), (4, 3)]}, {'at-player': (4, 9), 'at-stone': [(3, 9), (5, 9), (4, 3)]}, {'at-player': (3, 9), 'at-stone': [(3, 9), (5, 9), (4, 3)]}, {'at-player': (2, 9), 'at-stone': [(3, 9), (5, 9), (4, 3)]}, {'at-player': (3, 9), 'at-stone': [(5, 9), (4, 3), (4, 9)]}, {'at-player': (4, 9), 'at-stone': [(5, 9), (4, 3), (4, 9)]}, {'at-player': (4, 8), 'at-stone': [(5, 9), (4, 3), (4, 9)]}, {'at-player': (4, 9), 'at-stone': [(5, 9), (4, 3), (4, 10)]}, {'at-player': (5, 9), 'at-stone': [(5, 9), (4, 3), (4, 10)]}, {'at-player': (6, 9), 'at-stone': [(5, 9), (4, 3), (4, 10)]}, {'at-player': (5, 9), 'at-stone': [(4, 3), (4, 10), (4, 9)]}, {'at-player': (5, 10), 'at-stone': [(4, 3), (4, 10), (4, 9)]}, {'at-player': (4, 10), 'at-stone': [(4, 3), (4, 9), (3, 10)]}, {'at-player': (4, 9), 'at-stone': [(4, 3), (4, 9), (3, 10)]}, {'at-player': (4, 8), 'at-stone': [(4, 3), (4, 9), (3, 10)]}, {'at-player': (4, 9), 'at-stone': [(4, 3), (3, 10), (4, 10)]}, {'at-player': (3, 9), 'at-stone': [(4, 3), (3, 10), (4, 10)]}, {'at-player': (3, 10), 'at-stone': [(4, 3), (3, 10), (4, 10)]}, {'at-player': (4, 10), 'at-stone': [(4, 3), (3, 10), (5, 10)]}]
Found solution of length 9, optimal: 35
Grid [[0, 1, 1, 1, 1, 1, 0], [1, 1, 0, 2, 0, 1, 1], [1, 0, 0, 2, 0, 0, 1], [1, 0, 0, 2, 0, 0, 1], [1, 1, 0, 0, 1, 1, 1], [0, 1, 0, 0, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0]]
[{'at-player': (5, 3), 'at-stone': [(2, 3), (3, 3), (4, 3)]}, {'at-player': (4, 3), 'at-stone': [(2, 3), (3, 3), (4, 3)]}, {'at-player': (3, 3), 'at-stone': [(2, 3), (3, 3), (4, 3)]}, {'at-player': (2, 3), 'at-stone': [(3, 3), (4, 3), (1, 3)]}, {'at-player': (3, 3), 'at-stone': [(3, 3), (4, 3), (1, 3)]}, {'at-player': (4, 3), 'at-stone': [(3, 3), (4, 3), (1, 3)]}, {'at-player': (3, 3), 'at-stone': [(4, 3), (1, 3), (2, 3)]}, {'at-player': (4, 3), 'at-stone': [(4, 3), (1, 3), (2, 3)]}, {'at-player': (5, 3), 'at-stone': [(4, 3), (1, 3), (2, 3)]}, {'at-player': (4, 3), 'at-stone': [(1, 3), (2, 3), (3, 3)]}]
Found solution of length 29, optimal: 95
Grid [[0, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 2, 2, 2, 2, 1], [1, 0, 0, 0, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0]]
[{'at-player': (7, 5), 'at-stone': [(4, 2), (3, 3), (4, 3), (7, 6)]}, {'at-player': (8, 5), 'at-stone': [(4, 2), (3, 3), (4, 3), (7, 6)]}, {'at-player': (8, 6), 'at-stone': [(4, 2), (3, 3), (4, 3), (7, 6)]}, {'at-player': (7, 6), 'at-stone': [(4, 2), (3, 3), (4, 3), (6, 6)]}, {'at-player': (6, 6), 'at-stone': [(4, 2), (3, 3), (4, 3), (5, 6)]}, {'at-player': (5, 6), 'at-stone': [(4, 2), (3, 3), (4, 3), (4, 6)]}, {'at-player': (4, 6), 'at-stone': [(4, 2), (3, 3), (4, 3), (4, 6)]}, {'at-player': (4, 5), 'at-stone': [(4, 2), (3, 3), (4, 3), (4, 6)]}, {'at-player': (4, 6), 'at-stone': [(4, 2), (3, 3), (4, 3), (4, 7)]}, {'at-player': (4, 5), 'at-stone': [(4, 2), (3, 3), (4, 3), (4, 7)]}, {'at-player': (4, 4), 'at-stone': [(4, 2), (3, 3), (4, 3), (4, 7)]}, {'at-player': (4, 3), 'at-stone': [(4, 2), (3, 3), (4, 3), (4, 7)]}, {'at-player': (4, 2), 'at-stone': [(4, 2), (3, 3), (4, 3), (4, 7)]}, {'at-player': (4, 3), 'at-stone': [(4, 2), (3, 3), (4, 7), (4, 4)]}, {'at-player': (3, 3), 'at-stone': [(4, 2), (3, 3), (4, 7), (4, 4)]}, {'at-player': (2, 3), 'at-stone': [(4, 2), (3, 3), (4, 7), (4, 4)]}, {'at-player': (3, 3), 'at-stone': [(4, 2), (4, 7), (4, 4), (4, 3)]}, {'at-player': (4, 3), 'at-stone': [(4, 2), (4, 7), (4, 4), (4, 3)]}, {'at-player': (4, 4), 'at-stone': [(4, 2), (4, 7), (4, 3), (4, 5)]}, {'at-player': (4, 5), 'at-stone': [(4, 2), (4, 7), (4, 3), (4, 6)]}, {'at-player': (4, 4), 'at-stone': [(4, 2), (4, 7), (4, 3), (4, 6)]}, {'at-player': (4, 3), 'at-stone': [(4, 2), (4, 7), (4, 3), (4, 6)]}, {'at-player': (4, 2), 'at-stone': [(4, 2), (4, 7), (4, 3), (4, 6)]}, {'at-player': (4, 3), 'at-stone': [(4, 2), (4, 7), (4, 6), (4, 4)]}, {'at-player': (4, 4), 'at-stone': [(4, 2), (4, 7), (4, 6), (4, 5)]}, {'at-player': (4, 3), 'at-stone': [(4, 2), (4, 7), (4, 6), (4, 5)]}, {'at-player': (4, 2), 'at-stone': [(4, 2), (4, 7), (4, 6), (4, 5)]}, {'at-player': (4, 1), 'at-stone': [(4, 2), (4, 7), (4, 6), (4, 5)]}, {'at-player': (4, 2), 'at-stone': [(4, 7), (4, 6), (4, 5), (4, 3)]}, {'at-player': (4, 3), 'at-stone': [(4, 7), (4, 6), (4, 5), (4, 4)]}]
Found solution of length 17, optimal: 92
Grid [[0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [1, 0, 0, 0, 2, 0, 2, 0, 0, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1], [1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 0], [0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0]]
[{'at-player': (5, 5), 'at-stone': [(4, 5), (6, 5), (7, 8)]}, {'at-player': (4, 5), 'at-stone': [(4, 5), (6, 5), (7, 8)]}, {'at-player': (3, 5), 'at-stone': [(4, 5), (6, 5), (7, 8)]}, {'at-player': (4, 5), 'at-stone': [(6, 5), (7, 8), (5, 5)]}, {'at-player': (5, 5), 'at-stone': [(6, 5), (7, 8), (5, 5)]}, {'at-player': (5, 4), 'at-stone': [(6, 5), (7, 8), (5, 5)]}, {'at-player': (5, 5), 'at-stone': [(6, 5), (7, 8), (5, 6)]}, {'at-player': (6, 5), 'at-stone': [(6, 5), (7, 8), (5, 6)]}, {'at-player': (7, 5), 'at-stone': [(6, 5), (7, 8), (5, 6)]}, {'at-player': (6, 5), 'at-stone': [(7, 8), (5, 6), (5, 5)]}, {'at-player': (5, 5), 'at-stone': [(7, 8), (5, 6), (5, 5)]}, {'at-player': (5, 6), 'at-stone': [(7, 8), (5, 6), (5, 5)]}, {'at-player': (5, 5), 'at-stone': [(7, 8), (5, 6), (5, 4)]}, {'at-player': (5, 6), 'at-stone': [(7, 8), (5, 6), (5, 4)]}, {'at-player': (5, 7), 'at-stone': [(7, 8), (5, 6), (5, 4)]}, {'at-player': (5, 8), 'at-stone': [(7, 8), (5, 6), (5, 4)]}, {'at-player': (6, 8), 'at-stone': [(7, 8), (5, 6), (5, 4)]}, {'at-player': (7, 8), 'at-stone': [(5, 6), (5, 4), (8, 8)]}]
Found solution of length 33, optimal: 49
Grid [[1, 1, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 0, 0], [1, 0, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 1, 1, 2, 2, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1, 1, 1]]
[{'at-player': (4, 4), 'at-stone': [(2, 2), (3, 3)]}, {'at-player': (4, 3), 'at-stone': [(2, 2), (3, 3)]}, {'at-player': (3, 3), 'at-stone': [(2, 2), (3, 3)]}, {'at-player': (2, 3), 'at-stone': [(2, 2), (3, 3)]}, {'at-player': (2, 2), 'at-stone': [(2, 2), (3, 3)]}, {'at-player': (1, 2), 'at-stone': [(2, 2), (3, 3)]}, {'at-player': (2, 2), 'at-stone': [(3, 3), (3, 2)]}, {'at-player': (2, 3), 'at-stone': [(3, 3), (3, 2)]}, {'at-player': (3, 3), 'at-stone': [(3, 2), (4, 3)]}, {'at-player': (3, 2), 'at-stone': [(3, 2), (4, 3)]}, {'at-player': (3, 1), 'at-stone': [(3, 2), (4, 3)]}, {'at-player': (3, 2), 'at-stone': [(4, 3), (3, 3)]}, {'at-player': (4, 2), 'at-stone': [(4, 3), (3, 3)]}, {'at-player': (4, 3), 'at-stone': [(3, 3), (4, 4)]}, {'at-player': (3, 3), 'at-stone': [(3, 3), (4, 4)]}, {'at-player': (2, 3), 'at-stone': [(3, 3), (4, 4)]}, {'at-player': (3, 3), 'at-stone': [(4, 4), (4, 3)]}, {'at-player': (4, 3), 'at-stone': [(4, 4), (4, 3)]}, {'at-player': (4, 4), 'at-stone': [(4, 3), (4, 5)]}, {'at-player': (4, 5), 'at-stone': [(4, 3), (4, 5)]}, {'at-player': (3, 5), 'at-stone': [(4, 3), (4, 5)]}, {'at-player': (4, 5), 'at-stone': [(4, 3), (5, 5)]}, {'at-player': (5, 5), 'at-stone': [(4, 3), (5, 5)]}, {'at-player': (5, 6), 'at-stone': [(4, 3), (5, 5)]}, {'at-player': (5, 5), 'at-stone': [(4, 3), (5, 4)]}, {'at-player': (4, 5), 'at-stone': [(4, 3), (5, 4)]}, {'at-player': (4, 4), 'at-stone': [(4, 3), (5, 4)]}, {'at-player': (4, 3), 'at-stone': [(4, 3), (5, 4)]}, {'at-player': (4, 2), 'at-stone': [(4, 3), (5, 4)]}, {'at-player': (4, 3), 'at-stone': [(5, 4), (4, 4)]}, {'at-player': (4, 4), 'at-stone': [(5, 4), (4, 5)]}, {'at-player': (4, 5), 'at-stone': [(5, 4), (4, 5)]}, {'at-player': (3, 5), 'at-stone': [(5, 4), (4, 5)]}, {'at-player': (4, 5), 'at-stone': [(5, 4), (5, 5)]}]
Found solution of length 7, optimal: 429
Grid [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]
[{'at-player': (3, 15), 'at-stone': [(2, 14)]}, {'at-player': (2, 15), 'at-stone': [(2, 14)]}, {'at-player': (2, 14), 'at-stone': [(2, 14)]}, {'at-player': (2, 13), 'at-stone': [(2, 14)]}, {'at-player': (2, 14), 'at-stone': [(2, 15)]}, {'at-player': (2, 15), 'at-stone': [(2, 15)]}, {'at-player': (3, 15), 'at-stone': [(2, 15)]}, {'at-player': (2, 15), 'at-stone': [(1, 15)]}]
Found solution of length 3, optimal: 51
Grid [[1, 1, 1, 1, 1, 1], [1, 0, 0, 2, 0, 1], [1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1], [1, 0, 1, 2, 1, 1], [1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 0]]
[{'at-player': (5, 3), 'at-stone': [(3, 3), (4, 3)]}, {'at-player': (4, 3), 'at-stone': [(3, 3), (4, 3)]}, {'at-player': (3, 3), 'at-stone': [(4, 3), (2, 3)]}, {'at-player': (2, 3), 'at-stone': [(4, 3), (1, 3)]}]
Found solution of length 27, optimal: 83
Grid [[1, 1, 1, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 0, 1, 0], [1, 0, 0, 0, 0, 0, 1, 0], [1, 0, 0, 1, 2, 0, 1, 0], [1, 1, 0, 1, 2, 1, 1, 0], [1, 0, 0, 1, 2, 0, 1, 1], [1, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1]]
[{'at-player': (2, 1), 'at-stone': [(2, 2), (4, 2), (2, 3)]}, {'at-player': (2, 2), 'at-stone': [(2, 2), (4, 2), (2, 3)]}, {'at-player': (2, 3), 'at-stone': [(2, 2), (4, 2), (2, 4)]}, {'at-player': (2, 4), 'at-stone': [(2, 2), (4, 2), (2, 4)]}, {'at-player': (1, 4), 'at-stone': [(2, 2), (4, 2), (2, 4)]}, {'at-player': (2, 4), 'at-stone': [(2, 2), (4, 2), (3, 4)]}, {'at-player': (2, 3), 'at-stone': [(2, 2), (4, 2), (3, 4)]}, {'at-player': (2, 2), 'at-stone': [(2, 2), (4, 2), (3, 4)]}, {'at-player': (2, 1), 'at-stone': [(2, 2), (4, 2), (3, 4)]}, {'at-player': (2, 2), 'at-stone': [(4, 2), (3, 4), (2, 3)]}, {'at-player': (2, 3), 'at-stone': [(4, 2), (3, 4), (2, 4)]}, {'at-player': (2, 4), 'at-stone': [(4, 2), (3, 4), (2, 4)]}, {'at-player': (3, 4), 'at-stone': [(4, 2), (2, 4), (4, 4)]}, {'at-player': (2, 4), 'at-stone': [(4, 2), (2, 4), (4, 4)]}, {'at-player': (1, 4), 'at-stone': [(4, 2), (2, 4), (4, 4)]}, {'at-player': (2, 4), 'at-stone': [(4, 2), (4, 4), (3, 4)]}, {'at-player': (2, 3), 'at-stone': [(4, 2), (4, 4), (3, 4)]}, {'at-player': (2, 2), 'at-stone': [(4, 2), (4, 4), (3, 4)]}, {'at-player': (3, 2), 'at-stone': [(4, 2), (4, 4), (3, 4)]}, {'at-player': (4, 2), 'at-stone': [(4, 4), (3, 4), (5, 2)]}, {'at-player': (5, 2), 'at-stone': [(4, 4), (3, 4), (6, 2)]}, {'at-player': (6, 2), 'at-stone': [(4, 4), (3, 4), (6, 2)]}, {'at-player': (6, 1), 'at-stone': [(4, 4), (3, 4), (6, 2)]}, {'at-player': (6, 2), 'at-stone': [(4, 4), (3, 4), (6, 3)]}, {'at-player': (6, 3), 'at-stone': [(4, 4), (3, 4), (6, 4)]}, {'at-player': (6, 4), 'at-stone': [(4, 4), (3, 4), (6, 4)]}, {'at-player': (7, 4), 'at-stone': [(4, 4), (3, 4), (6, 4)]}, {'at-player': (6, 4), 'at-stone': [(4, 4), (3, 4), (5, 4)]}]
Found solution of length 23, optimal: 35
Grid [[1, 0, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 0, 2, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 2, 1], [1, 0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1]]
[{'at-player': (5, 2), 'at-stone': [(3, 2), (4, 2)]}, {'at-player': (4, 2), 'at-stone': [(3, 2), (4, 2)]}, {'at-player': (3, 2), 'at-stone': [(3, 2), (4, 2)]}, {'at-player': (3, 1), 'at-stone': [(3, 2), (4, 2)]}, {'at-player': (3, 2), 'at-stone': [(4, 2), (3, 3)]}, {'at-player': (4, 2), 'at-stone': [(4, 2), (3, 3)]}, {'at-player': (5, 2), 'at-stone': [(4, 2), (3, 3)]}, {'at-player': (4, 2), 'at-stone': [(3, 3), (3, 2)]}, {'at-player': (3, 2), 'at-stone': [(3, 3), (3, 2)]}, {'at-player': (3, 3), 'at-stone': [(3, 2), (3, 4)]}, {'at-player': (3, 4), 'at-stone': [(3, 2), (3, 4)]}, {'at-player': (4, 4), 'at-stone': [(3, 2), (3, 4)]}, {'at-player': (3, 4), 'at-stone': [(3, 2), (2, 4)]}, {'at-player': (3, 3), 'at-stone': [(3, 2), (2, 4)]}, {'at-player': (3, 2), 'at-stone': [(3, 2), (2, 4)]}, {'at-player': (3, 1), 'at-stone': [(3, 2), (2, 4)]}, {'at-player': (3, 2), 'at-stone': [(2, 4), (3, 3)]}, {'at-player': (3, 3), 'at-stone': [(2, 4), (3, 4)]}, {'at-player': (3, 4), 'at-stone': [(2, 4), (3, 5)]}, {'at-player': (2, 4), 'at-stone': [(2, 4), (3, 5)]}, {'at-player': (2, 3), 'at-stone': [(2, 4), (3, 5)]}, {'at-player': (2, 4), 'at-stone': [(3, 5), (2, 5)]}, {'at-player': (2, 5), 'at-stone': [(3, 5), (2, 5)]}, {'at-player': (3, 5), 'at-stone': [(2, 5), (4, 5)]}]
Found solution of length 16, optimal: 76
Grid [[0, 0, 0, 1, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 2, 0, 1, 1, 1], [1, 0, 0, 2, 0, 2, 0, 0, 1], [1, 1, 1, 0, 2, 0, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 0, 0, 0]]
[{'at-player': (4, 4), 'at-stone': [(3, 3), (5, 3), (3, 5), (5, 5)]}, {'at-player': (3, 4), 'at-stone': [(3, 3), (5, 3), (3, 5), (5, 5)]}, {'at-player': (2, 4), 'at-stone': [(3, 3), (5, 3), (3, 5), (5, 5)]}, {'at-player': (2, 5), 'at-stone': [(3, 3), (5, 3), (3, 5), (5, 5)]}, {'at-player': (3, 5), 'at-stone': [(3, 3), (5, 3), (5, 5), (4, 5)]}, {'at-player': (4, 5), 'at-stone': [(3, 3), (5, 3), (5, 5), (4, 5)]}, {'at-player': (5, 5), 'at-stone': [(3, 3), (5, 3), (5, 5), (4, 5)]}, {'at-player': (5, 6), 'at-stone': [(3, 3), (5, 3), (5, 5), (4, 5)]}, {'at-player': (5, 5), 'at-stone': [(3, 3), (5, 3), (4, 5), (5, 4)]}, {'at-player': (5, 4), 'at-stone': [(3, 3), (5, 3), (4, 5), (5, 4)]}, {'at-player': (6, 4), 'at-stone': [(3, 3), (5, 3), (4, 5), (5, 4)]}, {'at-player': (6, 3), 'at-stone': [(3, 3), (5, 3), (4, 5), (5, 4)]}, {'at-player': (5, 3), 'at-stone': [(3, 3), (4, 5), (5, 4), (4, 3)]}, {'at-player': (4, 3), 'at-stone': [(3, 3), (4, 5), (5, 4), (4, 3)]}, {'at-player': (3, 3), 'at-stone': [(3, 3), (4, 5), (5, 4), (4, 3)]}, {'at-player': (3, 2), 'at-stone': [(3, 3), (4, 5), (5, 4), (4, 3)]}, {'at-player': (3, 3), 'at-stone': [(4, 5), (5, 4), (4, 3), (3, 4)]}]
Found solution of length 65, optimal: 107
Grid [[1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 1, 1], [1, 1, 0, 2, 1, 0], [0, 1, 0, 2, 1, 0], [1, 1, 0, 2, 1, 0], [1, 0, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0], [1, 1, 1, 1, 1, 0]]
[{'at-player': (10, 2), 'at-stone': [(2, 2), (3, 2), (2, 3)]}, {'at-player': (10, 1), 'at-stone': [(2, 2), (3, 2), (2, 3)]}, {'at-player': (9, 1), 'at-stone': [(2, 2), (3, 2), (2, 3)]}, {'at-player': (8, 1), 'at-stone': [(2, 2), (3, 2), (2, 3)]}, {'at-player': (8, 2), 'at-stone': [(2, 2), (3, 2), (2, 3)]}, {'at-player': (7, 2), 'at-stone': [(2, 2), (3, 2), (2, 3)]}, {'at-player': (6, 2), 'at-stone': [(2, 2), (3, 2), (2, 3)]}, {'at-player': (5, 2), 'at-stone': [(2, 2), (3, 2), (2, 3)]}, {'at-player': (4, 2), 'at-stone': [(2, 2), (3, 2), (2, 3)]}, {'at-player': (3, 2), 'at-stone': [(2, 2), (3, 2), (2, 3)]}, {'at-player': (2, 2), 'at-stone': [(2, 2), (3, 2), (2, 3)]}, {'at-player': (3, 2), 'at-stone': [(2, 2), (2, 3), (4, 2)]}, {'at-player': (4, 2), 'at-stone': [(2, 2), (2, 3), (5, 2)]}, {'at-player': (5, 2), 'at-stone': [(2, 2), (2, 3), (6, 2)]}, {'at-player': (6, 2), 'at-stone': [(2, 2), (2, 3), (7, 2)]}, {'at-player': (7, 2), 'at-stone': [(2, 2), (2, 3), (8, 2)]}, {'at-player': (8, 2), 'at-stone': [(2, 2), (2, 3), (8, 2)]}, {'at-player': (8, 1), 'at-stone': [(2, 2), (2, 3), (8, 2)]}, {'at-player': (8, 2), 'at-stone': [(2, 2), (2, 3), (8, 3)]}, {'at-player': (8, 3), 'at-stone': [(2, 2), (2, 3), (8, 3)]}, {'at-player': (9, 3), 'at-stone': [(2, 2), (2, 3), (8, 3)]}, {'at-player': (8, 3), 'at-stone': [(2, 2), (2, 3), (7, 3)]}, {'at-player': (7, 3), 'at-stone': [(2, 2), (2, 3), (6, 3)]}, {'at-player': (6, 3), 'at-stone': [(2, 2), (2, 3), (5, 3)]}, {'at-player': (5, 3), 'at-stone': [(2, 2), (2, 3), (5, 3)]}, {'at-player': (5, 2), 'at-stone': [(2, 2), (2, 3), (5, 3)]}, {'at-player': (4, 2), 'at-stone': [(2, 2), (2, 3), (5, 3)]}, {'at-player': (3, 2), 'at-stone': [(2, 2), (2, 3), (5, 3)]}, {'at-player': (2, 2), 'at-stone': [(2, 2), (2, 3), (5, 3)]}, {'at-player': (1, 2), 'at-stone': [(2, 2), (2, 3), (5, 3)]}, {'at-player': (2, 2), 'at-stone': [(2, 3), (5, 3), (3, 2)]}, {'at-player': (2, 3), 'at-stone': [(2, 3), (5, 3), (3, 2)]}, {'at-player': (2, 4), 'at-stone': [(2, 3), (5, 3), (3, 2)]}, {'at-player': (2, 3), 'at-stone': [(5, 3), (3, 2), (2, 2)]}, {'at-player': (2, 2), 'at-stone': [(5, 3), (3, 2), (2, 2)]}, {'at-player': (3, 2), 'at-stone': [(5, 3), (2, 2), (4, 2)]}, {'at-player': (4, 2), 'at-stone': [(5, 3), (2, 2), (5, 2)]}, {'at-player': (5, 2), 'at-stone': [(5, 3), (2, 2), (6, 2)]}, {'at-player': (6, 2), 'at-stone': [(5, 3), (2, 2), (7, 2)]}, {'at-player': (7, 2), 'at-stone': [(5, 3), (2, 2), (8, 2)]}, {'at-player': (8, 2), 'at-stone': [(5, 3), (2, 2), (8, 2)]}, {'at-player': (8, 1), 'at-stone': [(5, 3), (2, 2), (8, 2)]}, {'at-player': (8, 2), 'at-stone': [(5, 3), (2, 2), (8, 3)]}, {'at-player': (8, 3), 'at-stone': [(5, 3), (2, 2), (8, 3)]}, {'at-player': (9, 3), 'at-stone': [(5, 3), (2, 2), (8, 3)]}, {'at-player': (8, 3), 'at-stone': [(5, 3), (2, 2), (7, 3)]}, {'at-player': (7, 3), 'at-stone': [(5, 3), (2, 2), (6, 3)]}, {'at-player': (6, 3), 'at-stone': [(5, 3), (2, 2), (6, 3)]}, {'at-player': (5, 3), 'at-stone': [(5, 3), (2, 2), (6, 3)]}, {'at-player': (5, 2), 'at-stone': [(5, 3), (2, 2), (6, 3)]}, {'at-player': (4, 2), 'at-stone': [(5, 3), (2, 2), (6, 3)]}, {'at-player': (3, 2), 'at-stone': [(5, 3), (2, 2), (6, 3)]}, {'at-player': (2, 2), 'at-stone': [(5, 3), (2, 2), (6, 3)]}, {'at-player': (1, 2), 'at-stone': [(5, 3), (2, 2), (6, 3)]}, {'at-player': (2, 2), 'at-stone': [(5, 3), (6, 3), (3, 2)]}, {'at-player': (3, 2), 'at-stone': [(5, 3), (6, 3), (4, 2)]}, {'at-player': (4, 2), 'at-stone': [(5, 3), (6, 3), (5, 2)]}, {'at-player': (5, 2), 'at-stone': [(5, 3), (6, 3), (6, 2)]}, {'at-player': (6, 2), 'at-stone': [(5, 3), (6, 3), (7, 2)]}, {'at-player': (7, 2), 'at-stone': [(5, 3), (6, 3), (8, 2)]}, {'at-player': (8, 2), 'at-stone': [(5, 3), (6, 3), (8, 2)]}, {'at-player': (8, 1), 'at-stone': [(5, 3), (6, 3), (8, 2)]}, {'at-player': (8, 2), 'at-stone': [(5, 3), (6, 3), (8, 3)]}, {'at-player': (8, 3), 'at-stone': [(5, 3), (6, 3), (8, 3)]}, {'at-player': (9, 3), 'at-stone': [(5, 3), (6, 3), (8, 3)]}, {'at-player': (8, 3), 'at-stone': [(5, 3), (6, 3), (7, 3)]}]
Total success: 0, failure: 11, total expansions 640956, total generated 1905110
